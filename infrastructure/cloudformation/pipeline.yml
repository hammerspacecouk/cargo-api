Parameters:
  GitHubRepo:
    Type: String

  GitHubBranch:
    Type: String

  GitHubToken:
    Type: String

  GitHubUser:
    Type: String

Resources:
  Repository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: cargo-api
      LifecyclePolicy:
        LifecyclePolicyText: |
          {
            "rules": [
                {
                    "rulePriority": 1,
                    "description": "Expire images older than 30 days",
                    "selection": {
                        "tagStatus": "untagged",
                        "countType": "sinceImagePushed",
                        "countUnit": "days",
                        "countNumber": 30
                    },
                    "action": {
                        "type": "expire"
                    }
                }
            ]
          }

  NginxRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: cargo-api-nginx
      LifecyclePolicy:
        LifecyclePolicyText: |
          {
            "rules": [
                {
                    "rulePriority": 1,
                    "description": "Expire images older than 30 days",
                    "selection": {
                        "tagStatus": "untagged",
                        "countType": "sinceImagePushed",
                        "countUnit": "days",
                        "countNumber": 30
                    },
                    "action": {
                        "type": "expire"
                    }
                }
            ]
          }

  CloudFormationExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument: |
        {
            "Statement": [{
                "Effect": "Allow",
                "Principal": { "Service": [ "cloudformation.amazonaws.com" ]},
                "Action": [ "sts:AssumeRole" ]
            }]
        }
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource: "*"
                Effect: Allow
                Action:
                  - ecs:*
                  - ecr:*
                  - iam:*

  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument: |
        {
            "Statement": [{
                "Effect": "Allow",
                "Principal": { "Service": [ "codebuild.amazonaws.com" ]},
                "Action": [ "sts:AssumeRole" ]
            }]
        }
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource: "*"
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - ecr:GetAuthorizationToken
              - Resource: !Sub arn:aws:s3:::${ArtifactBucket}/*
                Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:GetObjectVersion
              - Resource: !Sub arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/${Repository}
                Effect: Allow
                Action:
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - ecr:BatchCheckLayerAvailability
                  - ecr:PutImage
                  - ecr:InitiateLayerUpload
                  - ecr:UploadLayerPart
                  - ecr:CompleteLayerUpload
              - Resource: !Sub arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/${NginxRepository}
                Effect: Allow
                Action:
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - ecr:BatchCheckLayerAvailability
                  - ecr:PutImage
                  - ecr:InitiateLayerUpload
                  - ecr:UploadLayerPart
                  - ecr:CompleteLayerUpload
              - Resource: !Sub arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/php-base-image
                Effect: Allow
                Action:
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - ecr:BatchCheckLayerAvailability

  CodePipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument: |
        {
            "Statement": [{
                "Effect": "Allow",
                "Principal": { "Service": [ "codepipeline.amazonaws.com" ]},
                "Action": [ "sts:AssumeRole" ]
            }]
        }
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource:
                  - !Sub arn:aws:s3:::${ArtifactBucket}/*
                Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:GetBucketVersioning
              - Resource: "*"
                Effect: Allow
                Action:
                  - codebuild:StartBuild
                  - codebuild:BatchGetBuilds
                  - cloudformation:*
                  - iam:PassRole

  ArtifactBucket:
    Type: AWS::S3::Bucket
    Properties:
      LifecycleConfiguration:
        Rules:
          - ExpirationInDays: 21
            Status: Enabled

  CodeBuildProjectTest:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2
          phases:
            pre_build:
              commands:
                - echo Installing composer dependencies...
                - composer install --prefer-dist --no-scripts
            build:
              commands:
                - composer tests
      Environment:
        ComputeType: "BUILD_GENERAL1_SMALL"
        Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/php-base-image:latest
        Type: "LINUX_CONTAINER"
        EnvironmentVariables:
          - Name: AWS_DEFAULT_REGION
            Value: !Ref AWS::Region
          - Name: APP_ENV
            Value: build
      Name: "planet-cargo-api-test"
      ServiceRole: !Ref CodeBuildServiceRole

  CodeBuildProjectImage:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2
          phases:
            pre_build:
              commands:
                - $(aws ecr get-login)
                - TAG=r$(date +%F-%H%M%S-%N)
            build:
              commands:
                - docker build -t ${REPOSITORY_URI} --build-arg ENV=build --build-arg REPO=${BASE_REPO} --build-arg TAG=latest -f infrastructure/App.Dockerfile .
                - docker tag ${REPOSITORY_URI}:latest ${REPOSITORY_URI}:${TAG}
            post_build:
              commands:
                - docker push ${REPOSITORY_URI}:latest
                - docker push ${REPOSITORY_URI}:${TAG}
                - printf '{"tag":"%s"}' $TAG > build.json
          artifacts:
            files: build.json
      Environment:
        ComputeType: "BUILD_GENERAL1_SMALL"
        Image: "aws/codebuild/docker:1.12.1"
        Type: "LINUX_CONTAINER"
        EnvironmentVariables:
          - Name: AWS_DEFAULT_REGION
            Value: !Ref AWS::Region
          - Name: BASE_REPO
            Value: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/php-base-image
          - Name: REPOSITORY_URI
            Value: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${Repository}
      Name: "planet-cargo-api-build"
      ServiceRole: !Ref CodeBuildServiceRole

  CodeBuildNginxImage:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2
          phases:
            pre_build:
              commands:
                - $(aws ecr get-login)
                - TAG=r$(date +%F-%H%M%S-%N)
            build:
              commands:
                - docker build -t ${REPOSITORY_URI} --build-arg TAG=latest -f infrastructure/Nginx.Dockerfile .
                - docker tag ${REPOSITORY_URI}:latest ${REPOSITORY_URI}:${TAG}
            post_build:
              commands:
                - docker push ${REPOSITORY_URI}:latest
                - docker push ${REPOSITORY_URI}:${TAG}
      Environment:
        ComputeType: "BUILD_GENERAL1_SMALL"
        Image: "aws/codebuild/docker:1.12.1"
        Type: "LINUX_CONTAINER"
        EnvironmentVariables:
          - Name: AWS_DEFAULT_REGION
            Value: !Ref AWS::Region
          - Name: REPOSITORY_URI
            Value: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${NginxRepository}
      Name: "planet-cargo-api-nginx-build"
      ServiceRole: !Ref CodeBuildServiceRole

  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: planet-cargo-api
      RoleArn: !GetAtt CodePipelineServiceRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref ArtifactBucket
      Stages:
        - Name: Source
          Actions:
            - Name: App
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Version: 1
                Provider: GitHub
              Configuration:
                Owner: !Ref GitHubUser
                Repo: !Ref GitHubRepo
                Branch: !Ref GitHubBranch
                OAuthToken: !Ref GitHubToken
              OutputArtifacts:
                - Name: App
#            - Name: ECSServiceTemplate
#              ActionTypeId:
#                Category: Source
#                Owner: AWS
#                Version: 1
#                Provider: S3
#              OutputArtifacts:
#                - Name: Template
#              RunOrder: 1
#              Configuration:
#                S3Bucket: !Ref TemplateBucket
#                S3ObjectKey: api/templates.zip
        - Name: Test
          Actions:
            - Name: Test
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref CodeBuildProjectTest
              InputArtifacts:
                - Name: App
              OutputArtifacts: []
              RunOrder: 2
        - Name: Build
          Actions:
            - Name: BuildPhp
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref CodeBuildProjectImage
              InputArtifacts:
                - Name: App
              OutputArtifacts:
                - Name: BuildOutput
            - Name: BuildNginx
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref CodeBuildNginxImage
              InputArtifacts:
                - Name: App
              OutputArtifacts: []
#        - Name: Deploy
#          Actions:
#            - Name: DeployAlpha
#              ActionTypeId:
#                Category: Deploy
#                Owner: AWS
#                Version: 1
#                Provider: CloudFormation
#              Configuration:
#                ChangeSetName: Deploy
#                ActionMode: CREATE_UPDATE
#                StackName: !Ref AlphaStackName
#                Capabilities: CAPABILITY_NAMED_IAM
#                TemplatePath: Template::03-ecs-service.yml
#                RoleArn: !GetAtt CloudFormationExecutionRole.Arn
#                ParameterOverrides: !Sub |
#                  {
#                    "ImageTag" : { "Fn::GetParam" : [ "BuildOutput", "build.json", "tag" ] },
#                    "ALBStack": "${AlphaALBStack}",
#                    "ClusterStack": "${AlphaClusterStack}",
#                    "DesiredTaskCount": "${AlphaDesiredTaskCount}",
#                    "ECSRepository": "${Repository}",
#                    "Environment": "alpha",
#                    "NginxImageTag": "${NginxImageTag}"
#                  }
#              InputArtifacts:
#                - Name: Template
#                - Name: BuildOutput
#              RunOrder: 3


Outputs:
  PipelineUrl:
    Value: !Sub https://console.aws.amazon.com/codepipeline/home?region=${AWS::Region}#/view/${Pipeline}
