# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
  ip_hash_lifetime_seconds: 3600
  # Adds a fallback parameters if the env var is not set.
  # This allows you to run cache:warmup even if your
  # environment variables are not available yet.
  # You should not need to change this value.
  env(OAUTH_GOOGLE_CLIENT_ID): ''
  env(OAUTH_GOOGLE_CLIENT_SECRET): ''
  env(OAUTH_FACEBOOK_APP_ID): ''
  env(OAUTH_FACEBOOK_APP_SECRET): ''
  env(OAUTH_TWITTER_API_KEY): ''
  env(OAUTH_TWITTER_API_SECRET): ''
  env(OAUTH_MICROSOFT_APP_ID): ''
  env(OAUTH_MICROSOFT_APP_SECRET): ''
  env(OAUTH_MICROSOFT_APP_REDIRECT): ''
  env(OAUTH_REDDIT_CLIENT_ID): ''
  env(OAUTH_REDDIT_CLIENT_SECRET): ''
  env(CONFIG_HOSTNAME_API): ''
  env(CONFIG_HOSTNAME_WEB): ''
  env(CONFIG_COOKIE_SCOPE): ''
  env(CONFIG_MAX_IP_USERS): '0'
  env(CONFIG_DISTANCE_MULTIPLIER): '0'
  env(MAILER_FROM_NAME): ''
  env(MAILER_FROM_ADDRESS): ''
  env(APP_SECRET): ''
  env(LOGIN_FLAGS): '000000'
  env(TOKEN_PRIVATE_KEY): ''
  env(APP_VERSION): ''
  env(MAILER_HOST): ''
  env(MAILER_USERNAME): ''
  env(MAILER_PASSWORD): ''

services:
  # default configuration for services in *this* file
  _defaults:
    autowire: true      # Automatically injects dependencies in your services.
    autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
    public: false       # Allows optimizing the container by removing unused services; this also means
      # fetching services directly from the container via $container->get() won't work.
      # The best practice is to be explicit about your dependencies anyway.
    bind:
      $installedCacheAdapter: '@Symfony\Component\Cache\Psr16Cache'

  # makes classes in src/ available to be used as services
  # this creates a service per class whose id is the fully-qualified class name
  App\:
    resource: '../src/*'
    exclude: '../src/{Functions,Migrations,Data/Database/Entity/*,Domain/*}'

  # controllers are imported separately to make sure services can be injected
  # as action arguments even if you don't extend any base controller class
  App\Controller\:
    resource: '../src/Controller'
    tags: ['controller.service_arguments']

  # add more service definitions when explicit configuration is needed
  # please note that last definitions always *replace* previous ones

  App\Infrastructure\ApplicationConfig:
    arguments:
      - '%env(APP_ENV)%'
      - '%env(CONFIG_HOSTNAME_API)%'
      - '%env(CONFIG_HOSTNAME_WEB)%'
      - '%env(CONFIG_COOKIE_SCOPE)%'
      - '%env(CONFIG_MAX_IP_USERS)%'
      - '%ip_hash_lifetime_seconds%'
      - '%env(CONFIG_DISTANCE_MULTIPLIER)%'
      - '%env(MAILER_FROM_NAME)%'
      - '%env(MAILER_FROM_ADDRESS)%'
      - '%env(APP_SECRET)%'
      - '%env(LOGIN_FLAGS)%'
      - '%env(TOKEN_PRIVATE_KEY)%'
      - '%env(APP_VERSION)%'

  GuzzleHttp\Client:
    class: GuzzleHttp\Client

  Psr\SimpleCache\CacheInterface:
    class: App\Infrastructure\Cache

  Psr\Cache\CacheItemPoolInterface:
    class: Symfony\Component\Cache\Adapter\PhpFilesAdapter

  Ramsey\Uuid\UuidFactoryInterface:
    class: Ramsey\Uuid\UuidFactory

  Symfony\Component\Cache\Psr16Cache:
    class: Symfony\Component\Cache\Psr16Cache

  # Oauth Setup

  OAuthGoogle:
    class: League\OAuth2\Client\Provider\GenericProvider
    arguments:
      - clientId: '%env(OAUTH_GOOGLE_CLIENT_ID)%'
        clientSecret: '%env(OAUTH_GOOGLE_CLIENT_SECRET)%'
        redirectUri: '%env(CONFIG_HOSTNAME_API)%/login/google'
        urlAuthorize: 'https://accounts.google.com/o/oauth2/v2/auth'
        urlAccessToken: 'https://www.googleapis.com/oauth2/v4/token'
        urlResourceOwnerDetails: 'https://openidconnect.googleapis.com/v1/userinfo'
        responseResourceOwnerId: 'sub'
        scopes:
          - 'openid'

  OAuthMicrosoft:
    class: League\OAuth2\Client\Provider\GenericProvider
    arguments:
      - clientId: '%env(OAUTH_MICROSOFT_APP_ID)%'
        clientSecret: '%env(OAUTH_MICROSOFT_APP_SECRET)%'
        redirectUri: '%env(CONFIG_HOSTNAME_API)%/login/microsoft'
        urlAuthorize: 'https://login.microsoftonline.com/common/oauth2/v2.0/authorize'
        urlAccessToken: 'https://login.microsoftonline.com/common/oauth2/v2.0/token'
        urlResourceOwnerDetails: 'https://graph.microsoft.com/v1.0/me'
        scopes:
          - 'openid'
          - 'user.read'

  OAuthTwitter:
    class: League\OAuth2\Client\Provider\GenericProvider
    arguments:
      - clientId: '%env(OAUTH_TWITTER_API_KEY)%'
        clientSecret: '%env(OAUTH_TWITTER_API_SECRET)%'
        redirectUri: '%env(CONFIG_HOSTNAME_API)%/login/twitter'
        urlAuthorize: 'https://api.twitter.com/oauth/authorize'
        urlAccessToken: 'https://api.twitter.com/oauth/token'
        urlResourceOwnerDetails: 'https://api.twitter.com/oauth/'

  OAuthFacebook:
    class: League\OAuth2\Client\Provider\GenericProvider
    arguments:
      - clientId: '%env(OAUTH_FACEBOOK_APP_ID)%'
        clientSecret: '%env(OAUTH_FACEBOOK_APP_SECRET)%'
        redirectUri: '%env(CONFIG_HOSTNAME_API)%/login/facebook'
        urlAuthorize: 'https://www.facebook.com/dialog/oauth'
        urlAccessToken: 'https://graph.facebook.com/oauth/access_token'
        urlResourceOwnerDetails: 'https://graph.facebook.com/me?fields=id'

  OAuthReddit:
    class: App\Infrastructure\RedditOauthProvider
    arguments:
      - clientId: '%env(OAUTH_REDDIT_CLIENT_ID)%'
        clientSecret: '%env(OAUTH_REDDIT_CLIENT_SECRET)%'
        redirectUri: '%env(CONFIG_HOSTNAME_API)%/login/reddit'
        urlAuthorize: 'https://www.reddit.com/api/v1/authorize.compact'
        urlAccessToken: 'https://api.reddit.com/api/v1/access_token'
        urlResourceOwnerDetails: 'https://oauth.reddit.com/api/v1/me'
        scopes:
          - 'identity'

  App\Controller\Security\LoginGoogleAction:
    class: App\Controller\Security\LoginGoogleAction
    tags: ['controller.service_arguments']
    arguments:
      - '@OAuthGoogle'
      - '@App\Controller\Security\OAuthHandler'
      - '@App\Service\Oauth\GoogleService'

  App\Controller\Security\LoginMicrosoftAction:
    class: App\Controller\Security\LoginMicrosoftAction
    tags: ['controller.service_arguments']
    arguments:
      - '@OAuthMicrosoft'
      - '@App\Controller\Security\OAuthHandler'
      - '@App\Service\Oauth\MicrosoftService'

  App\Controller\Security\LoginRedditAction:
    class: App\Controller\Security\LoginRedditAction
    tags: ['controller.service_arguments']
    arguments:
      - '@OAuthReddit'
      - '@App\Controller\Security\OAuthHandler'
      - '@App\Service\Oauth\RedditService'

  App\ExceptionListener:
    arguments:
      $debug: '%kernel.debug%'
      $logger: '@logger'
    tags:
      - { name: kernel.event_listener, event: kernel.exception }
